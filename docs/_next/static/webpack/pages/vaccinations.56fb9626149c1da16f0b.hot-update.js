webpackHotUpdate_N_E("pages/vaccinations",{

/***/ "./src/data/getHospitalizationsByVaccineStatus.js":
/*!********************************************************!*\
  !*** ./src/data/getHospitalizationsByVaccineStatus.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _jsonpFetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonpFetch */ \"./src/data/jsonpFetch.js\");\n\nvar dataUrl = 'https://data.ontario.ca/api/3/action/datastore_search?resource_id=274b819c-5d69-4539-a4db-f2950794138c&limit=1000000';\n\nvar getHospitalizationsByVaccineStatus = function getHospitalizationsByVaccineStatus() {\n  return new Promise(function (resolve) {\n    Object(_jsonpFetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(dataUrl, function (_ref) {\n      var result = _ref.result;\n      var rawRecords = result.records;\n      rawRecords.sort(function (a, b) {\n        return new Date(a.report_date) - new Date(b.report_date);\n      }); // Data comes in with gaps for some dates, so fill in the gaps by replicating the previous date's data\n\n      var records = [];\n\n      for (var currentRecordIndex = 1; currentRecordIndex < rawRecords.length; currentRecordIndex++) {\n        // Backfill up to, but not including, the current record\n        var currentRecord = rawRecords[currentRecordIndex];\n        var curRecordTime = new Date(currentRecord.report_date).getTime(); // Always add the previous record in the original data set\n\n        var prevRecord = rawRecords[currentRecordIndex - 1];\n        records.push(prevRecord); // Continue adding copies of the previous record, until it matches the current record\n\n        var dateToFill = new Date(prevRecord.report_date);\n        dateToFill.setDate(dateToFill.getDate() + 1);\n\n        while (dateToFill.getTime() < curRecordTime) {\n          // Create a new record with a date to fill\n          var backfillRecord = Object.assign({}, prevRecord, {\n            report_date: dateToFill.toISOString().replace(/\\.\\d+Z/, '')\n          });\n          records.push(backfillRecord); // Update the date to fill\n\n          dateToFill.setDate(dateToFill.getDate() + 1);\n        }\n      } // Add the last record, which wasn't added by the above loop\n\n\n      records.push(rawRecords[rawRecords.length - 1]); // Back to your regularly scheduled code\n\n      records.map(function (record) {\n        var report_date = record.date,\n            icu_unvac = record.icu_unvac,\n            icu_partial_vac = record.icu_partial_vac,\n            icu_full_vac = record.icu_full_vac,\n            hospitalnonicu_partial_vac = record.hospitalnonicu_partial_vac,\n            hospitalnonicu_full_vac = record.hospitalnonicu_full_vac,\n            hospitalnonicu_unvac = record.hospitalnonicu_unvac;\n        record.date_string = new Date(report_date).toLocaleString('en-us', {\n          month: 'short',\n          day: 'numeric'\n        }); // record.cases_unvac = ensureNumber(covid19_cases_unvac);\n        // record.cases_partial_vac = ensureNumber(covid19_cases_partial_vac);\n        // record.cases_full_vac = ensureNumber(covid19_cases_full_vac);\n        // record.cases_vac_unknown = ensureNumber(covid19_cases_vac_unknown);\n\n        return record;\n      });\n      resolve(records);\n    });\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (getHospitalizationsByVaccineStatus);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2RhdGEvZ2V0SG9zcGl0YWxpemF0aW9uc0J5VmFjY2luZVN0YXR1cy5qcz83OTQzIl0sIm5hbWVzIjpbImRhdGFVcmwiLCJnZXRIb3NwaXRhbGl6YXRpb25zQnlWYWNjaW5lU3RhdHVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJqc29ucEZldGNoIiwicmVzdWx0IiwicmF3UmVjb3JkcyIsInJlY29yZHMiLCJzb3J0IiwiYSIsImIiLCJEYXRlIiwicmVwb3J0X2RhdGUiLCJjdXJyZW50UmVjb3JkSW5kZXgiLCJsZW5ndGgiLCJjdXJyZW50UmVjb3JkIiwiY3VyUmVjb3JkVGltZSIsImdldFRpbWUiLCJwcmV2UmVjb3JkIiwicHVzaCIsImRhdGVUb0ZpbGwiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImJhY2tmaWxsUmVjb3JkIiwiT2JqZWN0IiwiYXNzaWduIiwidG9JU09TdHJpbmciLCJyZXBsYWNlIiwibWFwIiwicmVjb3JkIiwiZGF0ZSIsImljdV91bnZhYyIsImljdV9wYXJ0aWFsX3ZhYyIsImljdV9mdWxsX3ZhYyIsImhvc3BpdGFsbm9uaWN1X3BhcnRpYWxfdmFjIiwiaG9zcGl0YWxub25pY3VfZnVsbF92YWMiLCJob3NwaXRhbG5vbmljdV91bnZhYyIsImRhdGVfc3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJtb250aCIsImRheSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBRUEsSUFBTUEsT0FBTyxHQUFHLHNIQUFoQjs7QUFFQSxJQUFNQyxrQ0FBa0MsR0FBRyxTQUFyQ0Esa0NBQXFDO0FBQUEsU0FDMUMsSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBYTtBQUN4QkMsK0RBQVUsQ0FBQ0osT0FBRCxFQUFVLGdCQUFnQjtBQUFBLFVBQWJLLE1BQWEsUUFBYkEsTUFBYTtBQUNuQyxVQUFNQyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0UsT0FBMUI7QUFDQUQsZ0JBQVUsQ0FBQ0UsSUFBWCxDQUFnQixVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxlQUFVLElBQUlDLElBQUosQ0FBU0YsQ0FBQyxDQUFDRyxXQUFYLElBQTBCLElBQUlELElBQUosQ0FBU0QsQ0FBQyxDQUFDRSxXQUFYLENBQXBDO0FBQUEsT0FBaEIsRUFGbUMsQ0FJbkM7O0FBQ0EsVUFBTUwsT0FBTyxHQUFHLEVBQWhCOztBQUNBLFdBQUssSUFBSU0sa0JBQWtCLEdBQUcsQ0FBOUIsRUFBaUNBLGtCQUFrQixHQUFHUCxVQUFVLENBQUNRLE1BQWpFLEVBQXlFRCxrQkFBa0IsRUFBM0YsRUFBK0Y7QUFDOUY7QUFDQSxZQUFJRSxhQUFhLEdBQUdULFVBQVUsQ0FBQ08sa0JBQUQsQ0FBOUI7QUFDQSxZQUFNRyxhQUFhLEdBQUcsSUFBSUwsSUFBSixDQUFTSSxhQUFhLENBQUNILFdBQXZCLEVBQW9DSyxPQUFwQyxFQUF0QixDQUg4RixDQUs5Rjs7QUFDQSxZQUFJQyxVQUFVLEdBQUdaLFVBQVUsQ0FBQ08sa0JBQWtCLEdBQUcsQ0FBdEIsQ0FBM0I7QUFDQU4sZUFBTyxDQUFDWSxJQUFSLENBQWFELFVBQWIsRUFQOEYsQ0FTOUY7O0FBQ0EsWUFBSUUsVUFBVSxHQUFHLElBQUlULElBQUosQ0FBU08sVUFBVSxDQUFDTixXQUFwQixDQUFqQjtBQUNBUSxrQkFBVSxDQUFDQyxPQUFYLENBQW1CRCxVQUFVLENBQUNFLE9BQVgsS0FBdUIsQ0FBMUM7O0FBRUEsZUFBT0YsVUFBVSxDQUFDSCxPQUFYLEtBQXVCRCxhQUE5QixFQUE2QztBQUM1QztBQUNBLGNBQU1PLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQlAsVUFBbEIsRUFBOEI7QUFDcEROLHVCQUFXLEVBQUVRLFVBQVUsQ0FBQ00sV0FBWCxHQUF5QkMsT0FBekIsQ0FBaUMsUUFBakMsRUFBMkMsRUFBM0M7QUFEdUMsV0FBOUIsQ0FBdkI7QUFHQXBCLGlCQUFPLENBQUNZLElBQVIsQ0FBYUksY0FBYixFQUw0QyxDQU81Qzs7QUFDQUgsb0JBQVUsQ0FBQ0MsT0FBWCxDQUFtQkQsVUFBVSxDQUFDRSxPQUFYLEtBQXVCLENBQTFDO0FBQ0E7QUFDRCxPQTdCa0MsQ0ErQm5DOzs7QUFDQWYsYUFBTyxDQUFDWSxJQUFSLENBQWFiLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDUSxNQUFYLEdBQW9CLENBQXJCLENBQXZCLEVBaENtQyxDQWtDbkM7O0FBQ0FQLGFBQU8sQ0FBQ3FCLEdBQVIsQ0FBWSxVQUFDQyxNQUFELEVBQVk7QUFBQSxZQUVoQmpCLFdBRmdCLEdBU25CaUIsTUFUbUIsQ0FFdEJDLElBRnNCO0FBQUEsWUFHdEJDLFNBSHNCLEdBU25CRixNQVRtQixDQUd0QkUsU0FIc0I7QUFBQSxZQUl0QkMsZUFKc0IsR0FTbkJILE1BVG1CLENBSXRCRyxlQUpzQjtBQUFBLFlBS3RCQyxZQUxzQixHQVNuQkosTUFUbUIsQ0FLdEJJLFlBTHNCO0FBQUEsWUFNdEJDLDBCQU5zQixHQVNuQkwsTUFUbUIsQ0FNdEJLLDBCQU5zQjtBQUFBLFlBT3RCQyx1QkFQc0IsR0FTbkJOLE1BVG1CLENBT3RCTSx1QkFQc0I7QUFBQSxZQVF0QkMsb0JBUnNCLEdBU25CUCxNQVRtQixDQVF0Qk8sb0JBUnNCO0FBVXZCUCxjQUFNLENBQUNRLFdBQVAsR0FBcUIsSUFBSTFCLElBQUosQ0FBU0MsV0FBVCxFQUFzQjBCLGNBQXRCLENBQXFDLE9BQXJDLEVBQThDO0FBQ2xFQyxlQUFLLEVBQUUsT0FEMkQ7QUFFbEVDLGFBQUcsRUFBRTtBQUY2RCxTQUE5QyxDQUFyQixDQVZ1QixDQWN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFPWCxNQUFQO0FBQ0EsT0FwQkQ7QUFxQkExQixhQUFPLENBQUNJLE9BQUQsQ0FBUDtBQUNBLEtBekRTLENBQVY7QUEwREEsR0EzREQsQ0FEMEM7QUFBQSxDQUEzQzs7QUE4RGVOLGlHQUFmIiwiZmlsZSI6Ii4vc3JjL2RhdGEvZ2V0SG9zcGl0YWxpemF0aW9uc0J5VmFjY2luZVN0YXR1cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqc29ucEZldGNoIGZyb20gJy4vanNvbnBGZXRjaCc7XG5cbmNvbnN0IGRhdGFVcmwgPSAnaHR0cHM6Ly9kYXRhLm9udGFyaW8uY2EvYXBpLzMvYWN0aW9uL2RhdGFzdG9yZV9zZWFyY2g/cmVzb3VyY2VfaWQ9Mjc0YjgxOWMtNWQ2OS00NTM5LWE0ZGItZjI5NTA3OTQxMzhjJmxpbWl0PTEwMDAwMDAnO1xuXG5jb25zdCBnZXRIb3NwaXRhbGl6YXRpb25zQnlWYWNjaW5lU3RhdHVzID0gKCkgPT5cblx0bmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRqc29ucEZldGNoKGRhdGFVcmwsICh7IHJlc3VsdCB9KSA9PiB7XG5cdFx0XHRjb25zdCByYXdSZWNvcmRzID0gcmVzdWx0LnJlY29yZHM7XG5cdFx0XHRyYXdSZWNvcmRzLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEucmVwb3J0X2RhdGUpIC0gbmV3IERhdGUoYi5yZXBvcnRfZGF0ZSkpO1xuXG5cdFx0XHQvLyBEYXRhIGNvbWVzIGluIHdpdGggZ2FwcyBmb3Igc29tZSBkYXRlcywgc28gZmlsbCBpbiB0aGUgZ2FwcyBieSByZXBsaWNhdGluZyB0aGUgcHJldmlvdXMgZGF0ZSdzIGRhdGFcblx0XHRcdGNvbnN0IHJlY29yZHMgPSBbXTtcblx0XHRcdGZvciAobGV0IGN1cnJlbnRSZWNvcmRJbmRleCA9IDE7IGN1cnJlbnRSZWNvcmRJbmRleCA8IHJhd1JlY29yZHMubGVuZ3RoOyBjdXJyZW50UmVjb3JkSW5kZXgrKykge1xuXHRcdFx0XHQvLyBCYWNrZmlsbCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIHRoZSBjdXJyZW50IHJlY29yZFxuXHRcdFx0XHRsZXQgY3VycmVudFJlY29yZCA9IHJhd1JlY29yZHNbY3VycmVudFJlY29yZEluZGV4XTtcblx0XHRcdFx0Y29uc3QgY3VyUmVjb3JkVGltZSA9IG5ldyBEYXRlKGN1cnJlbnRSZWNvcmQucmVwb3J0X2RhdGUpLmdldFRpbWUoKTtcblxuXHRcdFx0XHQvLyBBbHdheXMgYWRkIHRoZSBwcmV2aW91cyByZWNvcmQgaW4gdGhlIG9yaWdpbmFsIGRhdGEgc2V0XG5cdFx0XHRcdGxldCBwcmV2UmVjb3JkID0gcmF3UmVjb3Jkc1tjdXJyZW50UmVjb3JkSW5kZXggLSAxXTtcblx0XHRcdFx0cmVjb3Jkcy5wdXNoKHByZXZSZWNvcmQpO1xuXG5cdFx0XHRcdC8vIENvbnRpbnVlIGFkZGluZyBjb3BpZXMgb2YgdGhlIHByZXZpb3VzIHJlY29yZCwgdW50aWwgaXQgbWF0Y2hlcyB0aGUgY3VycmVudCByZWNvcmRcblx0XHRcdFx0bGV0IGRhdGVUb0ZpbGwgPSBuZXcgRGF0ZShwcmV2UmVjb3JkLnJlcG9ydF9kYXRlKTtcblx0XHRcdFx0ZGF0ZVRvRmlsbC5zZXREYXRlKGRhdGVUb0ZpbGwuZ2V0RGF0ZSgpICsgMSk7XG5cblx0XHRcdFx0d2hpbGUgKGRhdGVUb0ZpbGwuZ2V0VGltZSgpIDwgY3VyUmVjb3JkVGltZSkge1xuXHRcdFx0XHRcdC8vIENyZWF0ZSBhIG5ldyByZWNvcmQgd2l0aCBhIGRhdGUgdG8gZmlsbFxuXHRcdFx0XHRcdGNvbnN0IGJhY2tmaWxsUmVjb3JkID0gT2JqZWN0LmFzc2lnbih7fSwgcHJldlJlY29yZCwge1xuXHRcdFx0XHRcdFx0cmVwb3J0X2RhdGU6IGRhdGVUb0ZpbGwudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQrWi8sICcnKSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZWNvcmRzLnB1c2goYmFja2ZpbGxSZWNvcmQpO1xuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBkYXRlIHRvIGZpbGxcblx0XHRcdFx0XHRkYXRlVG9GaWxsLnNldERhdGUoZGF0ZVRvRmlsbC5nZXREYXRlKCkgKyAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdGhlIGxhc3QgcmVjb3JkLCB3aGljaCB3YXNuJ3QgYWRkZWQgYnkgdGhlIGFib3ZlIGxvb3Bcblx0XHRcdHJlY29yZHMucHVzaChyYXdSZWNvcmRzW3Jhd1JlY29yZHMubGVuZ3RoIC0gMV0pO1xuXG5cdFx0XHQvLyBCYWNrIHRvIHlvdXIgcmVndWxhcmx5IHNjaGVkdWxlZCBjb2RlXG5cdFx0XHRyZWNvcmRzLm1hcCgocmVjb3JkKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHtcblx0XHRcdFx0XHRkYXRlOiByZXBvcnRfZGF0ZSxcblx0XHRcdFx0XHRpY3VfdW52YWMsXG5cdFx0XHRcdFx0aWN1X3BhcnRpYWxfdmFjLFxuXHRcdFx0XHRcdGljdV9mdWxsX3ZhYyxcblx0XHRcdFx0XHRob3NwaXRhbG5vbmljdV9wYXJ0aWFsX3ZhYyxcblx0XHRcdFx0XHRob3NwaXRhbG5vbmljdV9mdWxsX3ZhYyxcblx0XHRcdFx0XHRob3NwaXRhbG5vbmljdV91bnZhYyxcblx0XHRcdFx0fSA9IHJlY29yZDtcblx0XHRcdFx0cmVjb3JkLmRhdGVfc3RyaW5nID0gbmV3IERhdGUocmVwb3J0X2RhdGUpLnRvTG9jYWxlU3RyaW5nKCdlbi11cycsIHtcblx0XHRcdFx0XHRtb250aDogJ3Nob3J0Jyxcblx0XHRcdFx0XHRkYXk6ICdudW1lcmljJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIHJlY29yZC5jYXNlc191bnZhYyA9IGVuc3VyZU51bWJlcihjb3ZpZDE5X2Nhc2VzX3VudmFjKTtcblx0XHRcdFx0Ly8gcmVjb3JkLmNhc2VzX3BhcnRpYWxfdmFjID0gZW5zdXJlTnVtYmVyKGNvdmlkMTlfY2FzZXNfcGFydGlhbF92YWMpO1xuXHRcdFx0XHQvLyByZWNvcmQuY2FzZXNfZnVsbF92YWMgPSBlbnN1cmVOdW1iZXIoY292aWQxOV9jYXNlc19mdWxsX3ZhYyk7XG5cdFx0XHRcdC8vIHJlY29yZC5jYXNlc192YWNfdW5rbm93biA9IGVuc3VyZU51bWJlcihjb3ZpZDE5X2Nhc2VzX3ZhY191bmtub3duKTtcblxuXHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXNvbHZlKHJlY29yZHMpO1xuXHRcdH0pO1xuXHR9KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0SG9zcGl0YWxpemF0aW9uc0J5VmFjY2luZVN0YXR1cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/data/getHospitalizationsByVaccineStatus.js\n");

/***/ })

})