webpackHotUpdate_N_E("pages/index",{

/***/ "./src/data/getOntarioStatuses.js":
/*!****************************************!*\
  !*** ./src/data/getOntarioStatuses.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _jsonpFetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonpFetch */ \"./src/data/jsonpFetch.js\");\n\nvar dataUrl = 'https://data.ontario.ca/api/3/action/datastore_search?resource_id=ed270bb8-340b-41f9-a7c6-e8ef587e6d11&limit=1000';\nvar hospitalField = 'Number of patients hospitalized with COVID-19';\nvar icuField = 'Number of patients in ICU due to COVID-19';\n\nvar getOntarioStatuses = function getOntarioStatuses() {\n  return new Promise(function (resolve) {\n    Object(_jsonpFetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(dataUrl, function (data) {\n      var records = data.result.records;\n      records.sort(function (a, b) {\n        return new Date(a['Reported Date']) - new Date(b['Reported Date']);\n      });\n      var cases_last7days = [0, 0, 0, 0, 0, 0, 0];\n      var deaths_last7days = [0, 0, 0, 0, 0, 0, 0];\n      var tests_last7days = [0, 0, 0, 0, 0, 0, 0];\n      var percentTestsPositive_last7days = [0, 0, 0, 0, 0, 0, 0];\n      var yesterdayCases = 0;\n      var yesterdayDeaths = 0;\n      var yesterdayActiveCases = 0;\n      var yesterdayResolvedCases = 0;\n      var yesterdayHospital = 0;\n      var yesterdayIcu = 0;\n      records.map(function (record) {\n        record.new_cases = record['Total Cases'] - yesterdayCases;\n        record.new_deaths = Math.max(record['Deaths'] - yesterdayDeaths, 0);\n        record.icu_no_ventilator = record[icuField] - record['Number of patients in ICU on a ventilator due to COVID-19'];\n        record.date_string = new Date(record['Reported Date']).toLocaleString('en-us', {\n          month: 'short',\n          day: 'numeric'\n        });\n        record.active_cases = record['Total Cases'] - record['Resolved'] - record['Deaths'];\n        record.new_active_cases = record.active_cases - yesterdayActiveCases;\n        record.new_resolved = record['Resolved'] - yesterdayResolvedCases;\n        record.new_hospital = record[hospitalField] - yesterdayHospital;\n        record.new_icu = record[icuField] - yesterdayIcu;\n        record.percent_positive = (record['new_cases'] / record['Total tests completed in the last day'] * 100).toFixed(2);\n\n        if (record.percent_positive > 100) {\n          record.percent_positive = 0;\n        } else if (isNaN(record.percent_positive)) {\n          record.percent_positive = 0;\n        }\n\n        percentTestsPositive_last7days.shift();\n        percentTestsPositive_last7days.push(Number(record.percent_positive || 0));\n        record.tests_positive_rolling_average = (percentTestsPositive_last7days.reduce(function (total, cases) {\n          return cases + total;\n        }, 0) / 7.0).toFixed(2);\n        tests_last7days.shift();\n        tests_last7days.push(record['Total tests completed in the last day'] || 0);\n        record.tests_rolling_average = Math.round(tests_last7days.reduce(function (total, cases) {\n          return cases + total;\n        }, 0) / 7.0);\n        cases_last7days.shift();\n        cases_last7days.push(record.new_cases);\n        var total_cases_last7days = cases_last7days.reduce(function (total, cases) {\n          return cases + total;\n        }, 0);\n        record.new_cases_rolling_average = Math.round(total_cases_last7days / 7);\n        deaths_last7days.shift();\n        deaths_last7days.push(record.new_deaths);\n        var total_deaths_last7days = deaths_last7days.reduce(function (total, cases) {\n          return cases + total;\n        }, 0);\n        record.new_deaths_rolling_average = Math.round(total_deaths_last7days / 7);\n        yesterdayIcu = record[icuField];\n        yesterdayHospital = record[hospitalField];\n        yesterdayCases = record['Total Cases'];\n        yesterdayDeaths = record['Deaths'];\n        yesterdayResolvedCases = record['Resolved'];\n        yesterdayActiveCases = record['active_cases'];\n        record.vocsTotal = vocFields.reduce(function (sum, field) {\n          return sum + record[field];\n        }, 0);\n        record.totalNonVOC = record['Total Cases'] - record.vocsTotal;\n        return record;\n      });\n      resolve(records);\n    });\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (getOntarioStatuses);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/getOntarioStatuses.js\n");

/***/ })

})