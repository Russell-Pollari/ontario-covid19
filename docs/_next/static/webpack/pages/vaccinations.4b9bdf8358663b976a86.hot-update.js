webpackHotUpdate_N_E("pages/vaccinations",{

/***/ "./src/data/getVaccineData.js":
/*!************************************!*\
  !*** ./src/data/getVaccineData.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _jsonpFetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonpFetch */ \"./src/data/jsonpFetch.js\");\n\nvar dataUrl = 'https://data.ontario.ca/api/3/action/datastore_search?resource_id=8a89caa9-511c-4568-af89-7f2174b4378c&limit=100000';\n\nvar ensureNumber = function ensureNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return Number((value || '0').replace(/,/g, ''));\n};\n\nvar getVaccineData = function getVaccineData() {\n  return new Promise(function (resolve) {\n    Object(_jsonpFetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(dataUrl, function (_ref) {\n      var result = _ref.result;\n      var rawRecords = result.records;\n      rawRecords.sort(function (a, b) {\n        return new Date(a.report_date) - new Date(b.report_date);\n      });\n      var vaccines_last7days = [0, 0, 0, 0, 0, 0, 0]; // Data comes in with gaps for some dates, so fill in the gaps by replicating the previous date's data\n\n      var records = [];\n\n      for (var currentRecordIndex = 1; currentRecordIndex < rawRecords.length; currentRecordIndex++) {\n        // Backfill up to, but not including, the current record\n        var currentRecord = rawRecords[currentRecordIndex];\n        var curRecordTime = new Date(currentRecord.report_date).getTime(); // Always add the previous record in the original data set\n\n        var prevRecord = rawRecords[currentRecordIndex - 1];\n        records.push(prevRecord); // Continue adding copies of the previous record, until it matches the current record\n\n        var dateToFill = new Date(prevRecord.report_date);\n        dateToFill.setDate(dateToFill.getDate() + 1);\n\n        while (dateToFill.getTime() < curRecordTime) {\n          // Create a new record with a date to fill\n          var backfillRecord = Object.assign({}, prevRecord, {\n            report_date: dateToFill.toISOString().replace(/\\.\\d+Z/, '')\n          });\n          records.push(backfillRecord); // Update the date to fill\n\n          dateToFill.setDate(dateToFill.getDate() + 1);\n        }\n      } // Add the last record, which wasn't added by the above loop\n\n\n      records.push(rawRecords[rawRecords.length - 1]);\n      var previous_total_second_doses_administered = 0;\n      var previous_total_one_shot_doses_administered = 0; // Back to your regularly scheduled code\n\n      records.map(function (record) {\n        var report_date = record.report_date,\n            total_doses_administered = record.total_doses_administered,\n            previous_day_total_doses_administered = record.previous_day_total_doses_administered,\n            total_doses_in_fully_vaccinated_individuals = record.total_doses_in_fully_vaccinated_individuals,\n            total_individuals_fully_vaccinated = record.total_individuals_fully_vaccinated;\n        record.date_string = new Date(report_date).toLocaleString('en-us', {\n          month: 'short',\n          day: 'numeric'\n        });\n        record.total_doses_administered = ensureNumber(total_doses_administered);\n        record.previous_day_total_doses_administered = ensureNumber(previous_day_total_doses_administered);\n        record.total_individuals_fully_vaccinated = ensureNumber(total_individuals_fully_vaccinated);\n        var total_doses_in_fully_vax = ensureNumber(total_doses_in_fully_vaccinated_individuals); // Calculate one-shot doses given (JnJ vaccine)\n\n        var total_one_shot_doses_administered = ensureNumber((record.total_individuals_fully_vaccinated - total_doses_in_fully_vax / 2) * 2);\n        var daily_one_shot_doses_administered = ensureNumber(total_one_shot_doses_administered - previous_total_one_shot_doses_administered);\n        previous_total_one_shot_doses_administered = total_one_shot_doses_administered; // Calculate second doses given\n\n        var total_second_doses_administered = Math.floor((total_doses_in_fully_vax - total_one_shot_doses_administered) / 2);\n        var daily_second_doses_administered = total_second_doses_administered - previous_total_second_doses_administered;\n        previous_total_second_doses_administered = total_second_doses_administered; // Calculate first doses given\n\n        var daily_first_doses_administered = record.previous_day_total_doses_administered - (daily_second_doses_administered + daily_one_shot_doses_administered);\n        record.previous_day_one_shot_doses_administered = daily_one_shot_doses_administered;\n        record.previous_day_second_doses_administered = daily_second_doses_administered;\n        record.previous_day_first_doses_administered = daily_first_doses_administered;\n        record.previous_day_third_doses = previous_day_total_doses_administered - ensureNumber(record.previous_day_at_least_one) - ensureNumber(record.previous_day_fully_vaccinated);\n        vaccines_last7days.shift();\n        vaccines_last7days.push(record.previous_day_total_doses_administered);\n        var total_vaccines_last7days = vaccines_last7days.reduce(function (total, cases) {\n          return cases + total;\n        }, 0);\n        record.new_vaccines_rolling_average = Math.round(total_vaccines_last7days / 7);\n        return record;\n      });\n      resolve(records);\n    });\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (getVaccineData);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/getVaccineData.js\n");

/***/ })

})