webpackHotUpdate_N_E("pages/index",{

/***/ "./lib/getOntarioStatuses.js":
/*!***********************************!*\
  !*** ./lib/getOntarioStatuses.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _jsonpFetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonpFetch */ \"./lib/jsonpFetch.js\");\nvar dataUrl = 'https://data.ontario.ca/api/3/action/datastore_search?resource_id=ed270bb8-340b-41f9-a7c6-e8ef587e6d11&limit=1000';\nvar hospitalField = 'Number of patients hospitalized with COVID-19';\nvar icuField = 'Number of patients in ICU with COVID-19';\n\n\nvar getOntarioStatuses = function getOntarioStatuses(callback) {\n  Object(_jsonpFetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(dataUrl, function (data) {\n    var records = data.result.records;\n    records.sort(function (a, b) {\n      return new Date(a['Reported Date']) - new Date(b['Reported Date']);\n    });\n    var yesterdayCases = 0;\n    var yesterdayDeaths = 0;\n    var yesterdayActiveCases = 0;\n    var yesterdayResolvedCases = 0;\n    var yesterdayHospital = 0;\n    var yesterdayIcu = 0;\n    var cases_last7days = [0, 0, 0, 0, 0, 0, 0];\n    var deaths_last7days = [0, 0, 0, 0, 0, 0, 0];\n    records.map(function (record) {\n      record.new_cases = record['Total Cases'] - yesterdayCases;\n      record.new_deaths = record['Deaths'] - yesterdayDeaths;\n      record.icu_no_ventilator = record[icuField] - record['Number of patients in ICU on a ventilator with COVID-19'];\n      record.date_string = new Date(record['Reported Date']).toLocaleString('en-us', {\n        month: 'short',\n        day: 'numeric'\n      });\n      record.active_cases = record['Total Cases'] - record['Resolved'] - record['Deaths'];\n      record.new_active_cases = record.active_cases - yesterdayActiveCases;\n      record.new_resolved = record['Resolved'] - yesterdayResolvedCases;\n      record.new_hospital = record[hospitalField] - yesterdayHospital;\n      record.new_icu = record[icuField] - yesterdayIcu;\n      record.percent_positive = (record['new_cases'] / record['Total tests completed in the last day'] * 100).toFixed(2);\n\n      if (record.percent_positive > 100) {\n        record.percent_positive = 0;\n      }\n\n      cases_last7days.shift();\n      cases_last7days.push(record.new_cases);\n      var total_cases_last7days = cases_last7days.reduce(function (total, cases) {\n        return cases + total;\n      }, 0);\n      record.new_cases_rolling_average = Math.round(total_cases_last7days / 7);\n      deaths_last7days.shift();\n      deaths_last7days.push(record.new_deaths);\n      var total_deaths_last7days = deaths_last7days.reduce(function (total, cases) {\n        return cases + total;\n      }, 0);\n      record.new_deaths_rolling_average = Math.round(total_deaths_last7days / 7);\n      yesterdayIcu = record[icuField];\n      yesterdayHospital = record[hospitalField];\n      yesterdayCases = record['Total Cases'];\n      yesterdayDeaths = record['Deaths'];\n      yesterdayResolvedCases = record['Resolved'];\n      yesterdayActiveCases = record['active_cases'];\n      return record;\n    });\n    callback(records);\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (getOntarioStatuses);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2dldE9udGFyaW9TdGF0dXNlcy5qcz80ZWI0Il0sIm5hbWVzIjpbImRhdGFVcmwiLCJob3NwaXRhbEZpZWxkIiwiaWN1RmllbGQiLCJnZXRPbnRhcmlvU3RhdHVzZXMiLCJjYWxsYmFjayIsImpzb25wRmV0Y2giLCJkYXRhIiwicmVjb3JkcyIsInJlc3VsdCIsInNvcnQiLCJhIiwiYiIsIkRhdGUiLCJ5ZXN0ZXJkYXlDYXNlcyIsInllc3RlcmRheURlYXRocyIsInllc3RlcmRheUFjdGl2ZUNhc2VzIiwieWVzdGVyZGF5UmVzb2x2ZWRDYXNlcyIsInllc3RlcmRheUhvc3BpdGFsIiwieWVzdGVyZGF5SWN1IiwiY2FzZXNfbGFzdDdkYXlzIiwiZGVhdGhzX2xhc3Q3ZGF5cyIsIm1hcCIsInJlY29yZCIsIm5ld19jYXNlcyIsIm5ld19kZWF0aHMiLCJpY3Vfbm9fdmVudGlsYXRvciIsImRhdGVfc3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJtb250aCIsImRheSIsImFjdGl2ZV9jYXNlcyIsIm5ld19hY3RpdmVfY2FzZXMiLCJuZXdfcmVzb2x2ZWQiLCJuZXdfaG9zcGl0YWwiLCJuZXdfaWN1IiwicGVyY2VudF9wb3NpdGl2ZSIsInRvRml4ZWQiLCJzaGlmdCIsInB1c2giLCJ0b3RhbF9jYXNlc19sYXN0N2RheXMiLCJyZWR1Y2UiLCJ0b3RhbCIsImNhc2VzIiwibmV3X2Nhc2VzX3JvbGxpbmdfYXZlcmFnZSIsIk1hdGgiLCJyb3VuZCIsInRvdGFsX2RlYXRoc19sYXN0N2RheXMiLCJuZXdfZGVhdGhzX3JvbGxpbmdfYXZlcmFnZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBLElBQU1BLE9BQU8sR0FBRyxtSEFBaEI7QUFDQSxJQUFNQyxhQUFhLEdBQUcsK0NBQXRCO0FBQ0EsSUFBTUMsUUFBUSxHQUFHLHlDQUFqQjtBQUVBOztBQUdBLElBQU1DLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FBQ0MsUUFBRCxF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LENBQXhELENBQTlCO0FBQ0FuQixZQUFNLENBQUNxQix5QkFBUCxHQUFtQ0MsSUFBSSxDQUFDQyxLQUFMLENBQVdOLHFCQUFxQixHQUFHLENBQW5DLENBQW5DO0FBRUFuQixzQkFBZ0IsQ0FBQ2lCLEtBQWpCO0FBQ0FqQixzQkFBZ0IsQ0FBQ2tCLElBQWpCLENBQXNCaEIsTUFBTSxDQUFDRSxVQUE3QjtBQUNBLFVBQU1zQixzQkFBc0IsR0FBRzFCLGdCQUFnQixDQUFDb0IsTUFBakIsQ0FBd0IsVUFBQ0MsS0FBRCxFQUFRQyxLQUFSO0FBQUEsZUFBa0JBLEtBQUssR0FBR0QsS0FBMUI7QUFBQSxPQUF4QixFQUF5RCxDQUF6RCxDQUEvQjtBQUNBbkIsWUFBTSxDQUFDeUIsMEJBQVAsR0FBb0NILElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxzQkFBc0IsR0FBRyxDQUFwQyxDQUFwQztBQUVBNUIsa0JBQVksR0FBR0ksTUFBTSxDQUFDcEIsUUFBRCxDQUFyQjtBQUNBZSx1QkFBaUIsR0FBR0ssTUFBTSxDQUFDckIsYUFBRCxDQUExQjtBQUNBWSxvQkFBYyxHQUFHUyxNQUFNLENBQUMsYUFBRCxDQUF2QjtBQUNBUixxQkFBZSxHQUFHUSxNQUFNLENBQUMsUUFBRCxDQUF4QjtBQUNBTiw0QkFBc0IsR0FBR00sTUFBTSxDQUFDLFVBQUQsQ0FBL0I7QUFDQVAsMEJBQW9CLEdBQUdPLE1BQU0sQ0FBQyxjQUFELENBQTdCO0FBQ0EsYUFBT0EsTUFBUDtBQUNBLEtBbENEO0FBbUNBbEIsWUFBUSxDQUFDRyxPQUFELENBQVI7QUFDQSxHQWhEUyxDQUFWO0FBaURBLENBbEREOztBQW9EZUosaUZBQWYiLCJmaWxlIjoiLi9saWIvZ2V0T250YXJpb1N0YXR1c2VzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGF0YVVybCA9ICdodHRwczovL2RhdGEub250YXJpby5jYS9hcGkvMy9hY3Rpb24vZGF0YXN0b3JlX3NlYXJjaD9yZXNvdXJjZV9pZD1lZDI3MGJiOC0zNDBiLTQxZjktYTdjNi1lOGVmNTg3ZTZkMTEmbGltaXQ9MTAwMCc7XG5jb25zdCBob3NwaXRhbEZpZWxkID0gJ051bWJlciBvZiBwYXRpZW50cyBob3NwaXRhbGl6ZWQgd2l0aCBDT1ZJRC0xOSc7XG5jb25zdCBpY3VGaWVsZCA9ICdOdW1iZXIgb2YgcGF0aWVudHMgaW4gSUNVIHdpdGggQ09WSUQtMTknO1xuXG5pbXBvcnQganNvbnBGZXRjaCBmcm9tICcuL2pzb25wRmV0Y2gnO1xuXG5cbmNvbnN0IGdldE9udGFyaW9TdGF0dXNlcyA9IChjYWxsYmFjaykgPT4gIHtcblx0anNvbnBGZXRjaChkYXRhVXJsLCBmdW5jdGlvbihkYXRhKSB7XG5cdFx0Y29uc3QgcmVjb3JkcyA9IGRhdGEucmVzdWx0LnJlY29yZHM7XG5cdFx0cmVjb3Jkcy5zb3J0KChhLGIpID0+IG5ldyBEYXRlKGFbJ1JlcG9ydGVkIERhdGUnXSkgLSBuZXcgRGF0ZShiWydSZXBvcnRlZCBEYXRlJ10pKTtcblxuXHRcdGxldCB5ZXN0ZXJkYXlDYXNlcyA9IDA7XG5cdFx0bGV0IHllc3RlcmRheURlYXRocyA9IDA7XG5cdFx0bGV0IHllc3RlcmRheUFjdGl2ZUNhc2VzID0gMDtcblx0XHRsZXQgeWVzdGVyZGF5UmVzb2x2ZWRDYXNlcyA9IDA7XG5cdFx0bGV0IHllc3RlcmRheUhvc3BpdGFsID0gMDtcblx0XHRsZXQgeWVzdGVyZGF5SWN1ID0gMDtcblx0XHRjb25zdCBjYXNlc19sYXN0N2RheXMgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMF07XG5cdFx0Y29uc3QgZGVhdGhzX2xhc3Q3ZGF5cyA9IFswLCAwLCAwLCAwLCAwLCAwLCAwXTtcblx0XHRyZWNvcmRzLm1hcChyZWNvcmQgPT4ge1xuXHRcdFx0cmVjb3JkLm5ld19jYXNlcyA9IHJlY29yZFsnVG90YWwgQ2FzZXMnXSAtIHllc3RlcmRheUNhc2VzO1xuXHRcdFx0cmVjb3JkLm5ld19kZWF0aHMgPSByZWNvcmRbJ0RlYXRocyddIC0geWVzdGVyZGF5RGVhdGhzO1xuXHRcdFx0cmVjb3JkLmljdV9ub192ZW50aWxhdG9yID0gcmVjb3JkW2ljdUZpZWxkXSAtIHJlY29yZFsnTnVtYmVyIG9mIHBhdGllbnRzIGluIElDVSBvbiBhIHZlbnRpbGF0b3Igd2l0aCBDT1ZJRC0xOSddO1xuXHRcdFx0cmVjb3JkLmRhdGVfc3RyaW5nID0gbmV3IERhdGUocmVjb3JkWydSZXBvcnRlZCBEYXRlJ10pLnRvTG9jYWxlU3RyaW5nKCdlbi11cycsIHtcblx0XHRcdFx0bW9udGg6ICdzaG9ydCcsXG5cdFx0XHRcdGRheTogJ251bWVyaWMnLFxuXHRcdFx0fSk7XG5cdFx0XHRyZWNvcmQuYWN0aXZlX2Nhc2VzID0gcmVjb3JkWydUb3RhbCBDYXNlcyddIC0gcmVjb3JkWydSZXNvbHZlZCddIC0gcmVjb3JkWydEZWF0aHMnXTtcblx0XHRcdHJlY29yZC5uZXdfYWN0aXZlX2Nhc2VzID0gcmVjb3JkLmFjdGl2ZV9jYXNlcyAtIHllc3RlcmRheUFjdGl2ZUNhc2VzO1xuXHRcdFx0cmVjb3JkLm5ld19yZXNvbHZlZCA9IHJlY29yZFsnUmVzb2x2ZWQnXSAtIHllc3RlcmRheVJlc29sdmVkQ2FzZXM7XG5cdFx0XHRyZWNvcmQubmV3X2hvc3BpdGFsID0gcmVjb3JkW2hvc3BpdGFsRmllbGRdIC0geWVzdGVyZGF5SG9zcGl0YWw7XG5cdFx0XHRyZWNvcmQubmV3X2ljdSA9IHJlY29yZFtpY3VGaWVsZF0gLSB5ZXN0ZXJkYXlJY3U7XG5cdFx0XHRyZWNvcmQucGVyY2VudF9wb3NpdGl2ZSA9ICgocmVjb3JkWyduZXdfY2FzZXMnXSAvIHJlY29yZFsnVG90YWwgdGVzdHMgY29tcGxldGVkIGluIHRoZSBsYXN0IGRheSddKSAqIDEwMCkudG9GaXhlZCgyKTtcblx0XHRcdGlmIChyZWNvcmQucGVyY2VudF9wb3NpdGl2ZSA+IDEwMCkge1xuXHRcdFx0XHRyZWNvcmQucGVyY2VudF9wb3NpdGl2ZSA9IDA7XG5cdFx0XHR9XG5cdFx0XHRjYXNlc19sYXN0N2RheXMuc2hpZnQoKVxuXHRcdFx0Y2FzZXNfbGFzdDdkYXlzLnB1c2gocmVjb3JkLm5ld19jYXNlcylcblx0XHRcdGNvbnN0IHRvdGFsX2Nhc2VzX2xhc3Q3ZGF5cyA9IGNhc2VzX2xhc3Q3ZGF5cy5yZWR1Y2UoKHRvdGFsLCBjYXNlcykgPT4gY2FzZXMgKyB0b3RhbCwgMCk7XG5cdFx0XHRyZWNvcmQubmV3X2Nhc2VzX3JvbGxpbmdfYXZlcmFnZSA9IE1hdGgucm91bmQodG90YWxfY2FzZXNfbGFzdDdkYXlzIC8gNyk7XG5cblx0XHRcdGRlYXRoc19sYXN0N2RheXMuc2hpZnQoKVxuXHRcdFx0ZGVhdGhzX2xhc3Q3ZGF5cy5wdXNoKHJlY29yZC5uZXdfZGVhdGhzKVxuXHRcdFx0Y29uc3QgdG90YWxfZGVhdGhzX2xhc3Q3ZGF5cyA9IGRlYXRoc19sYXN0N2RheXMucmVkdWNlKCh0b3RhbCwgY2FzZXMpID0+IGNhc2VzICsgdG90YWwsIDApO1xuXHRcdFx0cmVjb3JkLm5ld19kZWF0aHNfcm9sbGluZ19hdmVyYWdlID0gTWF0aC5yb3VuZCh0b3RhbF9kZWF0aHNfbGFzdDdkYXlzIC8gNyk7XG5cblx0XHRcdHllc3RlcmRheUljdSA9IHJlY29yZFtpY3VGaWVsZF07XG5cdFx0XHR5ZXN0ZXJkYXlIb3NwaXRhbCA9IHJlY29yZFtob3NwaXRhbEZpZWxkXTtcblx0XHRcdHllc3RlcmRheUNhc2VzID0gcmVjb3JkWydUb3RhbCBDYXNlcyddO1xuXHRcdFx0eWVzdGVyZGF5RGVhdGhzID0gcmVjb3JkWydEZWF0aHMnXTtcblx0XHRcdHllc3RlcmRheVJlc29sdmVkQ2FzZXMgPSByZWNvcmRbJ1Jlc29sdmVkJ107XG5cdFx0XHR5ZXN0ZXJkYXlBY3RpdmVDYXNlcyA9IHJlY29yZFsnYWN0aXZlX2Nhc2VzJ107XG5cdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdH0pXG5cdFx0Y2FsbGJhY2socmVjb3Jkcyk7XG5cdH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0T250YXJpb1N0YXR1c2VzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./lib/getOntarioStatuses.js\n");

/***/ })

})